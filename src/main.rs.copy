extern crate sdl2;

use sdl2::event::Event;
use sdl2::keyboard::Keycode;
use sdl2::pixels::Color;
use sdl2::rect::Rect;
use sdl2::render::TextureQuery;
use std::time::Duration;
use vysics::collider::CircleCollider;
use vysics::linalg::Vec2D;
use vysics::render::text::TextRender;
use vysics::rigidbody2d::force_generator::GravityGenerator;
use vysics::rigidbody2d::RigidBody2D;

pub fn main() -> Result<(), String> {
    let sdl_context = sdl2::init()?;
    let video_subsystem = sdl_context.video()?;
    let ttf_context = sdl2::ttf::init().map_err(|e| e.to_string())?;

    let window = video_subsystem
        .window("Vysics", 1280, 720)
        .position_centered()
        .opengl()
        .build()
        .map_err(|e| e.to_string())?;

    let mut canvas = window.into_canvas().build().map_err(|e| e.to_string())?;
    let texture_creator = canvas.texture_creator();

    canvas.set_draw_color(Color::RGB(0, 0, 0));
    canvas.clear();
    canvas.present();

    let mut event_pump = sdl_context.event_pump()?;

    let mut el = RigidBody2D::new(Vec2D::new(400., 300.), Box::new(CircleCollider {}));

    el.add_force_generator(Box::new(GravityGenerator {}));

    let mut salut = TextRender::new(&ttf_context, &texture_creator)?;

    salut.set_size(20)?;

    'running: loop {
        for event in event_pump.poll_iter() {
            match event {
                Event::Quit { .. }
                | Event::KeyDown {
                    keycode: Some(Keycode::Escape),
                    ..
                } => break 'running,
                _ => {}
            }
        }

        canvas.set_draw_color(Color::RGB(0, 0, 0));
        canvas.clear();

        canvas.set_draw_color(Color::RGB(255, 0, 0));
        canvas.fill_rect(Rect::new(
            el.position.x as i32,
            el.position.y as i32,
            50,
            50,
        ))?;

        let dt = Duration::from_millis(16);

        std::thread::sleep(dt);

        el.step(dt.as_secs_f64());

        salut.set_text(&format!(
            "Position: {}, Vitesse: {}",
            el.position, el.velocity
        ))?;
        salut.display_at(&mut canvas, 0, 0)?;

        canvas.present();
    }

    Ok(())
}
